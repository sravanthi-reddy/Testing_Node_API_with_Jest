{
	"info": {
		"_postman_id": "49445473-d693-43e1-b05b-d8a5a6c4b362",
		"name": "Assignment8",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"var schema ={\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"message\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"token\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"message\",\r",
							"    \"token\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    var result = tv4.validateResult(pm.response.json(),schema)\r",
							"    if(result.valid){\r",
							"        console.log(result)\r",
							"    }\r",
							"    pm.expect(result.valid).to.be.true;\r",
							"});\r",
							"\r",
							"pm.environment.set(\"token\", pm.response.json()[\"token\"])"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n        \r\n            \"username\": \"Bret\",\r\n            \"phone\": \"1-770-736-8031 x56442\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/users/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"users",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "getUserById",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": " {\r\n            \"name\": \"Ss nn\",\r\n            \"username\": \"Ram.Allurwae\",\r\n            \"email\": \"ram@gmail.com\",\r\n            \"phone\": \"210.065.3458\",\r\n            \"website\": \"ramall.io\"\r\n        }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/users/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"users",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "getOtherUserInfo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 403\", function () {\r",
							"    pm.response.to.have.status(403);\r",
							"})\r",
							"\r",
							"const unAuthorizedMes = \"Not Authorized. Unable to fetch other user's profile\";\r",
							"\r",
							"pm.test(\"Forbidden Message\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(unAuthorizedMes);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/users/2",
					"host": [
						"{{URL}}"
					],
					"path": [
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "getOtherUserInfo_withoutLogin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 403\", function () {\r",
							"    pm.response.to.have.status(403);\r",
							"})\r",
							"\r",
							"const unAuthenticatedMes = \"Forbidden, Please login to access your information\";\r",
							"\r",
							"\r",
							"pm.test(\"Forbidden Message\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(unAuthenticatedMes);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/users/1",
					"host": [
						"{{URL}}"
					],
					"path": [
						"users",
						"1"
					]
				}
			},
			"response": []
		}
	]
}